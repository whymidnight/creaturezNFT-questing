// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package questing

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// Exchange is the `exchange` instruction.
type Exchange struct {
	ExpectedDepositAmount *uint64
	ExpectedTakerAmount   *uint64

	// [0] = [SIGNER] taker
	//
	// [1] = [WRITE] takerDepositTokenAccount
	//
	// [2] = [WRITE] takerReceiveTokenAccount
	//
	// [3] = [WRITE] depositTokenAccount
	//
	// [4] = [WRITE] initializer
	//
	// [5] = [WRITE] questAccount
	//
	// [6] = [] tokenProgram
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewExchangeInstructionBuilder creates a new `Exchange` instruction builder.
func NewExchangeInstructionBuilder() *Exchange {
	nd := &Exchange{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 7),
	}
	return nd
}

// SetExpectedDepositAmount sets the "expectedDepositAmount" parameter.
func (inst *Exchange) SetExpectedDepositAmount(expectedDepositAmount uint64) *Exchange {
	inst.ExpectedDepositAmount = &expectedDepositAmount
	return inst
}

// SetExpectedTakerAmount sets the "expectedTakerAmount" parameter.
func (inst *Exchange) SetExpectedTakerAmount(expectedTakerAmount uint64) *Exchange {
	inst.ExpectedTakerAmount = &expectedTakerAmount
	return inst
}

// SetTakerAccount sets the "taker" account.
func (inst *Exchange) SetTakerAccount(taker ag_solanago.PublicKey) *Exchange {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(taker).SIGNER()
	return inst
}

// GetTakerAccount gets the "taker" account.
func (inst *Exchange) GetTakerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetTakerDepositTokenAccountAccount sets the "takerDepositTokenAccount" account.
func (inst *Exchange) SetTakerDepositTokenAccountAccount(takerDepositTokenAccount ag_solanago.PublicKey) *Exchange {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(takerDepositTokenAccount).WRITE()
	return inst
}

// GetTakerDepositTokenAccountAccount gets the "takerDepositTokenAccount" account.
func (inst *Exchange) GetTakerDepositTokenAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetTakerReceiveTokenAccountAccount sets the "takerReceiveTokenAccount" account.
func (inst *Exchange) SetTakerReceiveTokenAccountAccount(takerReceiveTokenAccount ag_solanago.PublicKey) *Exchange {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(takerReceiveTokenAccount).WRITE()
	return inst
}

// GetTakerReceiveTokenAccountAccount gets the "takerReceiveTokenAccount" account.
func (inst *Exchange) GetTakerReceiveTokenAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetDepositTokenAccountAccount sets the "depositTokenAccount" account.
func (inst *Exchange) SetDepositTokenAccountAccount(depositTokenAccount ag_solanago.PublicKey) *Exchange {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(depositTokenAccount).WRITE()
	return inst
}

// GetDepositTokenAccountAccount gets the "depositTokenAccount" account.
func (inst *Exchange) GetDepositTokenAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetInitializerAccount sets the "initializer" account.
func (inst *Exchange) SetInitializerAccount(initializer ag_solanago.PublicKey) *Exchange {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(initializer).WRITE()
	return inst
}

// GetInitializerAccount gets the "initializer" account.
func (inst *Exchange) GetInitializerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetQuestAccountAccount sets the "questAccount" account.
func (inst *Exchange) SetQuestAccountAccount(questAccount ag_solanago.PublicKey) *Exchange {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(questAccount).WRITE()
	return inst
}

// GetQuestAccountAccount gets the "questAccount" account.
func (inst *Exchange) GetQuestAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetTokenProgramAccount sets the "tokenProgram" account.
func (inst *Exchange) SetTokenProgramAccount(tokenProgram ag_solanago.PublicKey) *Exchange {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(tokenProgram)
	return inst
}

// GetTokenProgramAccount gets the "tokenProgram" account.
func (inst *Exchange) GetTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

func (inst Exchange) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_Exchange,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst Exchange) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *Exchange) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.ExpectedDepositAmount == nil {
			return errors.New("ExpectedDepositAmount parameter is not set")
		}
		if inst.ExpectedTakerAmount == nil {
			return errors.New("ExpectedTakerAmount parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Taker is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.TakerDepositTokenAccount is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.TakerReceiveTokenAccount is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.DepositTokenAccount is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.Initializer is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.QuestAccount is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.TokenProgram is not set")
		}
	}
	return nil
}

func (inst *Exchange) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("Exchange")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=2]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("ExpectedDepositAmount", *inst.ExpectedDepositAmount))
						paramsBranch.Child(ag_format.Param("  ExpectedTakerAmount", *inst.ExpectedTakerAmount))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=7]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("            taker", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("takerDepositToken", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("takerReceiveToken", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("     depositToken", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("      initializer", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("            quest", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta("     tokenProgram", inst.AccountMetaSlice.Get(6)))
					})
				})
		})
}

func (obj Exchange) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `ExpectedDepositAmount` param:
	err = encoder.Encode(obj.ExpectedDepositAmount)
	if err != nil {
		return err
	}
	// Serialize `ExpectedTakerAmount` param:
	err = encoder.Encode(obj.ExpectedTakerAmount)
	if err != nil {
		return err
	}
	return nil
}
func (obj *Exchange) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `ExpectedDepositAmount`:
	err = decoder.Decode(&obj.ExpectedDepositAmount)
	if err != nil {
		return err
	}
	// Deserialize `ExpectedTakerAmount`:
	err = decoder.Decode(&obj.ExpectedTakerAmount)
	if err != nil {
		return err
	}
	return nil
}

// NewExchangeInstruction declares a new Exchange instruction with the provided parameters and accounts.
func NewExchangeInstruction(
	// Parameters:
	expectedDepositAmount uint64,
	expectedTakerAmount uint64,
	// Accounts:
	taker ag_solanago.PublicKey,
	takerDepositTokenAccount ag_solanago.PublicKey,
	takerReceiveTokenAccount ag_solanago.PublicKey,
	depositTokenAccount ag_solanago.PublicKey,
	initializer ag_solanago.PublicKey,
	questAccount ag_solanago.PublicKey,
	tokenProgram ag_solanago.PublicKey) *Exchange {
	return NewExchangeInstructionBuilder().
		SetExpectedDepositAmount(expectedDepositAmount).
		SetExpectedTakerAmount(expectedTakerAmount).
		SetTakerAccount(taker).
		SetTakerDepositTokenAccountAccount(takerDepositTokenAccount).
		SetTakerReceiveTokenAccountAccount(takerReceiveTokenAccount).
		SetDepositTokenAccountAccount(depositTokenAccount).
		SetInitializerAccount(initializer).
		SetQuestAccountAccount(questAccount).
		SetTokenProgramAccount(tokenProgram)
}
